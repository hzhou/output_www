include: output.def
include: macros_output/for.def

page: output_php, output_main
    type: pm
    output_dir: lib/MyDef
    ext: php
    package: MyDef::output_php

subcode: enter_php
    push @$out, "<?php\n"

subcode: exit_php
    $if $out->[-1] eq "<?php\n"
        pop @$out
    $else
        push @$out, "?>\n";

subcode:: init_page
    $global %php_globals, @php_globals
    %php_globals=()
    @php_globals=()

subcode:: dumpout
    push @$f, "<?php\n"
    $if @php_globals
        $foreach $v in @php_globals
            push @$f, "$v;\n"
    push @$out, "?>\n"

#----------------------------------------------- 
subcode: parsecode
    $call parsecode_common

subcode: parsecode_other
    $if $l!~/[\{\};]\s*$/
        $l.=";";

subcode: parsecode_func_param

subcode: parsecode_func
    $if $func =~/^if(\w*)/
        $if $1 and $param!~/^!/
            $param=test_var($param, $1 eq 'z')
        return single_block("if($param){", "}")
    $elif $func =~ /^(el|els|else)if(\w*)$/
        $if $2 and $param!~/^!/
            $param=test_var($param, $2 eq 'z')
        return single_block("elseif($param){", "}")
    $elif $func eq "else"
        return single_block("else{", "}")
    $elif $func eq "for"
        $call parsecode_for_support, c_style
    $elif $func eq "foreach" or $func eq "for" or $func eq "while"
        return single_block("$func ($param){", "}")
    $elif $func eq "function"
        return single_block("function $param {", "}")
    $elif $func eq "global"
        $param=~s/\s*;\s*$//
        my @tlist=MyDef::utils::proper_split($param)
        $foreach $v in @tlist
            $if !$php_globals{$v}
                $php_globals{$v}=1
                push @php_globals, $v
            $v=~s/=.*//
            push @$out, "global $v;"
        return
    $elif $func eq "print"
        my $str=$param
        my $need_escape
        $if $str=~/^\s*\"(.*)\"\s*$/
            $str=$1
        $else
            $need_escape=1
        push @$out, "echo \"$str\";"
        return

subcode: for_i0_i1_step
    $call for_i0_i1_step_default, loop_var
    subcode: loop_var
        $if !$var
            $var="\$i"
        $elif $var=~/^(\w+)/
            $var='$'.$var

#----------------------------------------------- 
fncode: echo_php($t, $ln)
    $t=~s/\\/\\\\/g
    $t=~s/"/\\"/g
    $if $ln
        return "echo \"$t\\n\";";
    $else
        return "echo \"$t\";";

fncode: test_var($param, $z)
    $if $param=~/(\$\w+)\[(^[\]]*)\]/
        $if !$z
            return "array_key_exists($2, $1) and $param"
        $else
            return "!(array_key_exists($2, $1) and $param)"
    $else
        $if $z
            return "empty($param)"
        $else
            return "!empty($param)"

