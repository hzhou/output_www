include: output.def

page: output_js, output_main
    type: pm
    output_dir: lib/MyDef
    ext: js
    package: MyDef::output_js

subcode:: init_page
    $global %js_globals, @js_globals
    %js_globals=()
    @js_globals=()

subcode:: dumpout
    my $block=MyDef::compileutil::get_named_block("js_init")
    $foreach $v in @js_globals
        push @$block, "var $v;\n"

#------------------------------------
subcode: parsecode
    $call parsecode_common

subcode: parsecode_func_param
    # $call @js_parse_func_param

subcode: parsecode_other
    $if $l!~/[:\(\{\};,]\s*$/
        $l.=';'

subcode: parsecode_special
    $elif $l=~/^(\S+)\s*=\s*"(.*\$\w+.*)"\s*$/
        push @$out, "$1=". js_string($2)
        return

subcode: parsecode_func
    my $param1=""
    my $param2=$param
    $if $func eq "global"
        $param=~s/\s*;\s*$//
        my @tlist=MyDef::utils::proper_split($param)
        $foreach $v in @tlist
            $if !$js_globals{$v}
                $js_globals{$v}=1
                push @js_globals, $v
        return
    $elif $func =~ /^(function)$/
        return single_block("$1 $param\{", "}")
    $elif $func =~ /^(if|while|switch|with)$/
        return single_block("$1($param){", "}")
    $elif $func =~ /^(el|els|else)if$/
        return single_block("else if($param){", "}")
    $elif $func eq "else"
        return single_block("else{", "}")
    $elif $func eq "for" or $func eq "foreach"
        $call js_parse_for
    $call @parsecode_func_other

subcode: js_parse_for
    $if $param=~/(\w+)=(.*?):(.*?)(:.*)?$/
        my ($var, $i0, $i1, $step)=($1, $2, $3, $4);
        my $stepclause;
        $if $step
            my $t=substr($step, 1);
            $if $t eq "-1"
                $stepclause="var $var=$i0;$var>$i1;$var--";
            $elif $t=~/^-/
                $stepclause="var $var=$i0;$var>$i1;$var=$var$t";
            $else
                $stepclause="var $var=$i0;$var<$i1;$var+=$t";
        $else
            $if $i1 eq "0"
                $stepclause="var $var=$i0-1;$var>=0;$var--";
            $elif $i1=~/^-?\d+/ and $i0=~/^-?\d+/ and $i1<$i0
                $stepclause="var $var=$i0;$var>$i1;$var--";
            $else
                $stepclause="var $var=$i0;$var<$i1;$var++";
        return single_block("for($stepclause){", "}")
    $elif $param=~/^(\S+)$/
        $call set_macro, "item", "$1\[i]"
        return single_block("for(i=0;i<$1.length;i++){", "}")
    $else
        return single_block("$func($param){", "}")


# -------------------------
fncode: js_string($t)
    my @parts=split /(\$\w+)/, $t
    $if $parts[0]=~/^$/
        shift @parts
    $for $i=0:@parts
        $if $parts[$i]=~/^\$(\w+)/
            $parts[$i]=$1
            $while $parts[$i+1]=~/^(\[.*?\])/
                $parts[$i].=$1
                $parts[$i+1]=$'
        $else
            $parts[$i]= "\"$parts[$i]\""
    return join(' + ', @parts)

#---- $print ------------------
include: macros_output/print.def
subcode:: parsecode_func_other
    $elif $func eq "print"
        $param=~s/^\s+//
        my ($n, $fmt)=fmt_string($param, 0)
        $call get_print_to
        $if !$print_to
            push @$out, "console.log($fmt)"
        $else
            push @$out, "console.$print_to($fmt)"
        return
    $elif $func eq "dump"
        push @$out, "console.log($param)"
        return

macros:
    printf_formats: s

fncode: get_var_fmt($v, $warn)
    return '%s'
